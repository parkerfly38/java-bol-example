/*
 * Electronic Bill Of Lading Service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nmfta.ebol.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BOLRequestImagesShippingLabels
 */


public class BOLRequestImagesShippingLabels {
  @SerializedName("format")
  private String format = null;

  @SerializedName("quantity")
  private Integer quantity = null;

  @SerializedName("position")
  private Integer position = null;

  public BOLRequestImagesShippingLabels format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Specifies the printer format type for the labels.   Required when images.includeShippingLabels is true.   Valid Values: See the Shipping_Label_Formats schema at the bottom of this page. 
   * @return format
  **/
  @Schema(example = "Avery", description = "Specifies the printer format type for the labels.   Required when images.includeShippingLabels is true.   Valid Values: See the Shipping_Label_Formats schema at the bottom of this page. ")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public BOLRequestImagesShippingLabels quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Specifies the quantity of labels desired.   Required when images.includeShippingLabels is true. 
   * @return quantity
  **/
  @Schema(example = "5", description = "Specifies the quantity of labels desired.   Required when images.includeShippingLabels is true. ")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public BOLRequestImagesShippingLabels position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Specifies the starting position for the shipping labels.  Required when images.shippingLabel is Avery.   Valid Values: * 1 - 6 
   * @return position
  **/
  @Schema(example = "2", description = "Specifies the starting position for the shipping labels.  Required when images.shippingLabel is Avery.   Valid Values: * 1 - 6 ")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BOLRequestImagesShippingLabels boLRequestImagesShippingLabels = (BOLRequestImagesShippingLabels) o;
    return Objects.equals(this.format, boLRequestImagesShippingLabels.format) &&
        Objects.equals(this.quantity, boLRequestImagesShippingLabels.quantity) &&
        Objects.equals(this.position, boLRequestImagesShippingLabels.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, quantity, position);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BOLRequestImagesShippingLabels {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
